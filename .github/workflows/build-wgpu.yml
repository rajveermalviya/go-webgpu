name: Build wgpu-native

on:
  workflow_dispatch:
  pull_request:

env:
  WGPU_COMMIT: 2d32686a4a8f17f6b90926dc770b0480a28db942
  ANDROID_MIN_SDK: "21"

jobs:
  build-wgpu:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    env:
      CARGO_BUILD_TARGET: ${{ matrix.target }}
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: build - linux/amd64
            os: ubuntu-18.04
            toolchain: stable
            target: x86_64-unknown-linux-gnu
            goos: linux
            goarch: amd64

          - name: build - linux/386
            os: ubuntu-18.04
            toolchain: stable
            target: i686-unknown-linux-gnu
            goos: linux
            goarch: "386"
            setup_env: |
              sudo apt update -y
              sudo apt install -y gcc-multilib

          - name: build - windows/amd64
            os: windows-2019
            toolchain: stable-msvc
            target: x86_64-pc-windows-msvc
            goos: windows
            goarch: amd64
            setup_env: |
              choco install -y --force llvm | exit 0
              echo "LIBCLANG_PATH=C:\Program Files\LLVM\lib" >> $GITHUB_ENV

          - name: build - windows/386
            os: windows-2019
            toolchain: stable-i686-pc-windows-msvc
            target: i686-pc-windows-msvc
            goos: windows
            goarch: "386"
            setup_env: |
              choco install -y --force --x86 llvm | exit 0
              echo "LIBCLANG_PATH=C:\Program Files (x86)\LLVM\lib" >> $GITHUB_ENV

          - name: build - darwin/amd64
            os: macos-11
            toolchain: stable
            target: x86_64-apple-darwin
            goos: darwin
            goarch: amd64

          - name: build - darwin/arm64
            os: macos-11
            toolchain: stable
            target: aarch64-apple-darwin
            goos: darwin
            goarch: arm64

          - name: build - ios/amd64
            os: macos-11
            toolchain: stable
            target: x86_64-apple-ios
            goos: ios
            goarch: amd64

          - name: build - ios/arm64
            os: macos-11
            toolchain: stable
            target: aarch64-apple-ios
            goos: ios
            goarch: arm64

          - name: build - android/amd64
            os: ubuntu-22.04
            toolchain: stable
            target: x86_64-linux-android
            goos: android
            goarch: amd64
            setup_env: |
              set -x
              export CC=$ANDROID_NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android$ANDROID_MIN_SDK-clang

              echo "CC=$CC" >> $GITHUB_ENV
              echo "CXX=$CC++" >> $GITHUB_ENV
              echo "CLANG_PATH=$CC" >> $GITHUB_ENV
              echo "CARGO_TARGET_X86_64_LINUX_ANDROID_LINKER=$CC" >> $GITHUB_ENV

          - name: build - android/arm64
            os: ubuntu-22.04
            toolchain: stable
            target: aarch64-linux-android
            goos: android
            goarch: arm64
            setup_env: |
              set -x
              export CC=$ANDROID_NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android$ANDROID_MIN_SDK-clang

              echo "CC=$CC" >> $GITHUB_ENV
              echo "CXX=$CC++" >> $GITHUB_ENV
              echo "CLANG_PATH=$CC" >> $GITHUB_ENV
              echo "CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=$CC" >> $GITHUB_ENV

          - name: build - android/arm
            os: ubuntu-22.04
            toolchain: stable
            target: armv7-linux-androideabi
            goos: android
            goarch: arm
            setup_env: |
              set -x
              export CC=$ANDROID_NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi$ANDROID_MIN_SDK-clang

              echo "CC=$CC" >> $GITHUB_ENV
              echo "CXX=$CC++" >> $GITHUB_ENV
              echo "CLANG_PATH=$CC" >> $GITHUB_ENV
              echo "CARGO_TARGET_ARMV7_LINUX_ANDROIDEABI_LINKER=$CC" >> $GITHUB_ENV

    steps:
      # Checkout
      - uses: actions/checkout@v2
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          target: ${{ matrix.target }}
          default: true

      - if: ${{ matrix.goos == 'android' }}
        name: Setup Android NDK
        run: |
          set -ex
          mkdir -p /tmp/go-webgpu-ndk/
          cd /tmp/go-webgpu-ndk/

          # ndkVersion "25.0.8775105"
          curl -LO https://dl.google.com/android/repository/android-ndk-r25-linux.zip

          unzip android-ndk-r25-linux.zip
          rm android-ndk-r25-linux.zip
          export ANDROID_NDK_PATH=$PWD/android-ndk-r25

          echo "ANDROID_NDK_PATH=$ANDROID_NDK_PATH" >> $GITHUB_ENV
          echo "LIBCLANG_PATH=$ANDROID_NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/lib64/libclang.so.13" >> $GITHUB_ENV
          echo "LLVM_CONFIG_PATH=$ANDROID_NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-config" >> $GITHUB_ENV
          echo "BINDGEN_EXTRA_CLANG_ARGS='-isysroot $ANDROID_NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/sysroot'" >> $GITHUB_ENV

        shell: bash

      - name: Setup Environment
        run: ${{ matrix.setup_env }}
        shell: bash

      - name: Build
        run: |
          set -ex

          git clone --recursive https://github.com/gfx-rs/wgpu-native.git tmp
          cd tmp
          git checkout $WGPU_COMMIT

          # workaround missing libgcc in ndk r23+
          if [ ${{ matrix.goos }} == "android" ]; then
            mkdir -p tmp-lib
            echo "INPUT(-lunwind)" | tee tmp-lib/libgcc.a
            export RUSTFLAGS="-L $PWD/tmp-lib"
          fi

          export CARGO_PROFILE_RELEASE_OPT_LEVEL=2
          cargo build --release
          ls -al target/$CARGO_BUILD_TARGET/release/
          mkdir -p $GITHUB_WORKSPACE/wgpu/lib/$GOOS/$GOARCH

          if [ ${{ matrix.goos }} == "windows" ]; then
            mv target/$CARGO_BUILD_TARGET/release/wgpu_native.dll target/$CARGO_BUILD_TARGET/release/"$GOOS"_"$GOARCH"_wgpu_native.dll
          else
            mv target/$CARGO_BUILD_TARGET/release/libwgpu_native.a target/$CARGO_BUILD_TARGET/release/"$GOOS"_"$GOARCH"_libwgpu_native.a
          fi

        shell: bash

      - uses: actions/upload-artifact@v3
        with:
          name: wgpu-artifacts
          path: |
            ${{ github.workspace }}/tmp/target/${{ env.CARGO_BUILD_TARGET }}/release/${{ matrix.goos }}_${{ matrix.goarch }}_wgpu_native.dll
            ${{ github.workspace }}/tmp/target/${{ env.CARGO_BUILD_TARGET }}/release/${{ matrix.goos }}_${{ matrix.goarch }}_libwgpu_native.a

  send-pr:
    needs: build-wgpu
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: wgpu-artifacts
          path: ${{ github.workspace }}/tmp

      - name: Build
        run: |
          set -ex

          declare -a arr=(
              "android_amd64"
              "android_arm"
              "android_arm64"
              "darwin_amd64"
              "darwin_arm64"
              "ios_amd64"
              "ios_arm64"
              "linux_386"
              "linux_amd64"
              "windows_386"
              "windows_amd64")

          for i in "${arr[@]}"
          do
              # split string
              IFS='_' read -ra tuple <<< "$i"
              GOOS="${tuple[0]}"
              GOARCH="${tuple[1]}"

              if [ $GOOS == "windows" ]; then
                rm -f $GITHUB_WORKSPACE/wgpu/lib/$GOOS/$GOARCH/wgpu_native.dll.gz
                rm -f $GITHUB_WORKSPACE/wgpu/lib/$GOOS/$GOARCH/wgpu_native.dll.sum

                cp $GITHUB_WORKSPACE/tmp/"$GOOS"_"$GOARCH"_wgpu_native.dll $GITHUB_WORKSPACE/wgpu/lib/$GOOS/$GOARCH/wgpu_native.dll
                sha256sum $GITHUB_WORKSPACE/wgpu/lib/$GOOS/$GOARCH/wgpu_native.dll > $GITHUB_WORKSPACE/wgpu/lib/$GOOS/$GOARCH/wgpu_native.dll.sum
                gzip -n -9 $GITHUB_WORKSPACE/wgpu/lib/$GOOS/$GOARCH/wgpu_native.dll

              else
                rm -f $GITHUB_WORKSPACE/wgpu/lib/$GOOS/$GOARCH/libwgpu_native.a

                cp $GITHUB_WORKSPACE/tmp/"$GOOS"_"$GOARCH"_libwgpu_native.a $GITHUB_WORKSPACE/wgpu/lib/$GOOS/$GOARCH/libwgpu_native.a
              fi

          done

          rm -rf $GITHUB_WORKSPACE/tmp
          tree $GITHUB_WORKSPACE/wgpu

        shell: bash

      # # Send a PR
      # - name: Create Pull Request
      #   uses: peter-evans/create-pull-request@v3
      #   with:
      #     commit-message: ${{ matrix.pr_commit_message }}
      #     branch-suffix: random
      #     title: ${{ matrix.pr_title }}
      #     body: ${{ matrix.pr_body }}
